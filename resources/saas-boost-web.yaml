---
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: 2010-09-09
Description: AWS SaaS Boost Admin Console
Parameters:
  Environment:
    Description: SaaS Boost "environment" such as test, prod, beta, etc...
    Type: String
    MinLength: 1
  AdminEmailAddress:
    Description: Email address of admin user to receive temporary password notification
    Type: String
    Default: ''
  WebS3Bucket:
    Description: S3 Bucket to host the Admin Console web app
    Type: String
  AuthMethod:
    Description: Authentication method
    Type: String
    Default: CognitoUserPool
    AllowedValues:
      - CognitoUserPool
      - OIDC
  OIDCIssuer:
    Description: OIDC Issuer
    Type: String
    Default: ''
  DomainName:
    Description: Domain Name
    Type: String
    Default: ''

Conditions:
  CreateCognitoResources: !Equals
    - !Ref AuthMethod
    - CognitoUserPool
  IsCNRegion: !Or
    - !Equals [ !Sub '${AWS::Region}', 'cn-north-1' ]
    - !Equals [ !Sub '${AWS::Region}', 'cn-northwest-1' ]
  DomainNameSet: !Not [ !Equals [!Ref DomainName, ''] ]

Resources:
  ConsoleOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub access-identity-${WebS3Bucket}
  ConsoleCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: Saas Boost Admin Console
        DefaultRootObject: index.html
        Enabled: true
        IPV6Enabled: false
        HttpVersion: http2
        Aliases:
          - 'Fn::If':
              - DomainNameSet
              - !Ref DomainName
              - !Ref AWS::NoValue
        Origins:
          - DomainName: !Sub ${WebS3Bucket}.s3.${AWS::Region}.${AWS::URLSuffix}
            Id: !Sub sb-${Environment}-s3-website
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${ConsoleOriginAccessIdentity}
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: !Sub sb-${Environment}-s3-website
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
          ForwardedValues:
            'Fn::If':
              - IsCNRegion
              -  QueryString: true
                 Cookies:
                   Forward: none
              - !Ref AWS::NoValue
          # CachingOptimized managed cache policy
          CachePolicyId:
             'Fn::If':
               - IsCNRegion
               - !Ref AWS::NoValue
               - 658327ea-f89d-4fab-a63d-7e88639e58f6
          # CORS-S3Origin managed origin request policy
          OriginRequestPolicyId:
            'Fn::If':
              - IsCNRegion
              - !Ref AWS::NoValue
              - 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf
          # CORS-with-preflight-and-SecurityHeadersPolicy managed response headers policy
          ResponseHeadersPolicyId: eaab4381-ed33-4a86-88ca-d9558dc6cd63
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
  ConsoleUserPool:
    Type: AWS::Cognito::UserPool
    Condition: CreateCognitoResources
    DependsOn: ConsoleCloudFrontDistribution
    Properties:
      UserPoolName: !Sub sb-${Environment}-users
      MfaConfiguration: "OFF"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
          TemporaryPasswordValidityDays: 7
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
        InviteMessageTemplate:
          EmailMessage: !Sub |
            <b>Welcome to AWS SaaS Boost!</b> <br>
            <br>
            You can login to your AWS SaaS Boost environment at <a rel="noopener noreferrer" href="https://${ConsoleCloudFrontDistribution.DomainName}">https://${ConsoleCloudFrontDistribution.DomainName}</a>.
            <br>
            Your username is:  <b>{username}</b>
            <br>
            Your temporary password is:  <b>{####}</b>
            <br>
          EmailSubject: !Sub AWS SaaS Boost temporary password for environment ${Environment}
      Schema:
        - Name: identity_pool
          AttributeDataType: String
          Mutable: false
  ConsoleUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Condition: CreateCognitoResources
    Properties:
      ClientName: !Sub sb-${Environment}-client-app
      UserPoolId: !Ref ConsoleUserPool
      SupportedIdentityProviders:
        - COGNITO
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      GenerateSecret: false
  ConsoleIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Condition: CreateCognitoResources
    Properties:
      IdentityPoolName: !Sub sb-${Environment}-identities
      AllowClassicFlow: true
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref ConsoleUserPoolClient
          ProviderName: !Sub cognito-idp.${AWS::Region}.${AWS::URLSuffix}/${ConsoleUserPool}
          ServerSideTokenCheck: true
  ConsoleIdentityPoolAuthRole:
    Type: AWS::IAM::Role
    Condition: CreateCognitoResources
    Properties:
      RoleName: !Sub sb-${Environment}-cognito-auth-role-${AWS::Region}
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: {"Federated": "cognito-identity.amazonaws.com"}
            Action:
              - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud:
                  - !Ref ConsoleIdentityPool
              ForAnyValue:StringLike: {"cognito-identity.amazonaws.com:amr": authenticated}
  ConsoleIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Condition: CreateCognitoResources
    Properties:
      IdentityPoolId: !Ref ConsoleIdentityPool
      Roles:
        authenticated: !GetAtt ConsoleIdentityPoolAuthRole.Arn
  # Create the initial admin user
  ConsoleAdminUser:
    Type: AWS::Cognito::UserPoolUser
    Condition: CreateCognitoResources
    Properties:
      DesiredDeliveryMediums:
        - EMAIL
      ForceAliasCreation: false
      UserAttributes:
        - Name: "custom:identity_pool"
          Value: !Ref ConsoleIdentityPool
        - Name: "email"
          Value: !Ref AdminEmailAddress
        - Name: "email_verified"
          Value: "true"
      Username: admin
      UserPoolId: !Ref ConsoleUserPool
  WebBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        !Ref WebS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser:
                !GetAtt ConsoleOriginAccessIdentity.S3CanonicalUserId
            Action: s3:GetObject
            Resource: !Sub arn:${AWS::Partition}:s3:::${WebS3Bucket}/*
          - Effect: Deny
            Action: s3:*
            Principal: '*'
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${WebS3Bucket}/*
              - !Sub arn:${AWS::Partition}:s3:::${WebS3Bucket}
            Condition:
              Bool: {'aws:SecureTransport': false}
Outputs:
  SBUserPool:
    Condition: CreateCognitoResources
    Description: SaaS Boost User Pool Id
    Value: !Ref ConsoleUserPool
    Export:
      Name: !Sub saas-boost::${Environment}-${AWS::Region}:userPoolId
  SBUserPoolClient:
    Condition: CreateCognitoResources
    Description: SaaS Boost User Pool Client id
    Value: !Ref ConsoleUserPoolClient
    Export:
      Name: !Sub saas-boost::${Environment}-${AWS::Region}:userPoolClientId
  SBIdentityPool:
    Condition: CreateCognitoResources
    Description: SaaS Boost Identity Pool Id
    Value: !Ref ConsoleIdentityPool
    Export:
      Name: !Sub saas-boost::${Environment}-${AWS::Region}:identityPoolId

  CloudFrontDistributionUrl:
    Description: Saas Boost Cloudfront distribution URL or domain name
    Value: !Sub https://${ConsoleCloudFrontDistribution.DomainName}
  WebUrl:
    Description: Web Url (domain name)
    Value:
      'Fn::If':
        - DomainNameSet
        - !Sub https://${DomainName}
        - !Sub https://${ConsoleCloudFrontDistribution.DomainName}
    Export:
      Name: !Sub saas-boost::${Environment}-${AWS::Region}:webUrl
  CognitoSignOnBaseUri:
    Condition: CreateCognitoResources
    Description: URL for Cognito Hosted signon base URI
    Value: !Sub saas-boost-${Environment}.auth.${AWS::Region}.amazoncognito.com
    Export:
      Name: !Sub saas-boost::${Environment}-${AWS::Region}:cognitoBaseUri